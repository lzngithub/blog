{"remainingRequest":"C:\\Users\\EDZ\\Desktop\\project\\vue_template\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\EDZ\\Desktop\\project\\vue_template\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\EDZ\\Desktop\\project\\vue_template\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\EDZ\\Desktop\\project\\vue_template\\src\\plugins\\axios\\index.js","dependencies":[{"path":"C:\\Users\\EDZ\\Desktop\\project\\vue_template\\src\\plugins\\axios\\index.js","mtime":1593416953559},{"path":"C:\\Users\\EDZ\\Desktop\\project\\vue_template\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1593416946796},{"path":"C:\\Users\\EDZ\\Desktop\\project\\vue_template\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1593416952633},{"path":"C:\\Users\\EDZ\\Desktop\\project\\vue_template\\node_modules\\babel-loader\\lib\\index.js","mtime":1593416946667},{"path":"C:\\Users\\EDZ\\Desktop\\project\\vue_template\\node_modules\\eslint-loader\\index.js","mtime":1593416948668}],"contextDependencies":[],"result":["import axios from 'axios';\naxios.defaults.timeout = 3000; // 设置 post put 默认Content-Type为application/json\n\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.put['Content-Type'] = 'application/json'; // http request 拦截器\n\naxios.interceptors.request.use(function (config) {\n  // eslint-disable-next-line max-len\n  var authorization = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJTdWJqZWN0IiwidXNlcl9uYW1lIjoiYW5kb25AbWFpbC5mb3hjb25uLmNvbSIsInNjb3BlIjpbImFsbCJdLCJpc3MiOiJGaWlDbG91ZCIsImV4cCI6MTU4NjgyNzYyMSwiaWF0IjoxNTg2ODI1ODIxLCJhdXRob3JpdGllcyI6WyJhZG1pbiJdLCJqdGkiOiJhMjk5MGQ0Yi02ZmM5LTRkNGQtYjIxYy1jYmEzNGFkODZhMWQiLCJjbGllbnRfaWQiOiJiM2JmMDc0Mi1jMWZmLTQyNjgtYjMxZS1iZmIxNGExODFkNzEifQ.8JFjgCtu_OfxZN03ae-NpwER4eqcToR_8PnpDDxc50M';\n  config.headers.Authorization = authorization; // post put方法时，将对象转换为string类型\n\n  if (config.method === 'post' || config.method === 'put') {\n    config.data = JSON.stringify(config.data);\n  }\n\n  return config; // 只有return config后，才能成功发出请求\n}, function (error) {\n  // 请求错误时做的动作\n  return Promise.reject(error);\n}); // http reponse 拦截器\n\naxios.interceptors.response.use(undefined, function (error) {\n  console.log(error);\n  var res = error.response;\n\n  switch (res && res.status) {\n    case 401:\n      console.log('用户未登录或token过期');\n      break;\n\n    case 403:\n      console.log('你没有操作权限');\n      break;\n\n    case 404:\n      console.log('找不到资源');\n      break;\n\n    case 500:\n      console.log('服务器错误');\n      break;\n\n    default:\n      break;\n  }\n\n  return Promise.reject(error.response.data);\n});\nexport default axios;",null]}